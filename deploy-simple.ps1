# Script de Deploy Simplificado - xcafe API H√≠brida
# Usu√°rio paga deploy via MetaMask, API s√≥ compila

param(
    [Parameter(Mandatory=$false)]
    [string]$RenderServiceName = "xcafe-token-api-simple",
    
    [Parameter(Mandatory=$false)]
    [switch]$TestLocal
)

Write-Host "üöÄ Iniciando deploy da xcafe API H√çBRIDA..." -ForegroundColor Green
Write-Host "API compila, usu√°rio paga deploy via MetaMask" -ForegroundColor Yellow

# Verificar se estamos no diret√≥rio correto
if (!(Test-Path "api/")) {
    Write-Host "‚ùå Erro: Execute este script na raiz do projeto xcafe" -ForegroundColor Red
    exit 1
}

# Entrar no diret√≥rio da API
Set-Location "api/"

# Backup dos arquivos atuais
Write-Host "üì¶ Criando backup dos arquivos atuais..." -ForegroundColor Blue
$backupDir = "backup-$(Get-Date -Format 'yyyyMMdd-HHmmss')"
New-Item -ItemType Directory -Path $backupDir -Force | Out-Null
Copy-Item "package.json" "$backupDir/" -ErrorAction SilentlyContinue
Copy-Item "server.js" "$backupDir/" -ErrorAction SilentlyContinue

# Configurar para vers√£o h√≠brida
Write-Host "üîß Configurando API H√≠brida (usu√°rio paga deploy)..." -ForegroundColor Blue

# Verificar se arquivos existem
if (!(Test-Path "server-hybrid.js")) {
    Write-Host "‚ùå Erro: server-hybrid.js n√£o encontrado!" -ForegroundColor Red
    exit 1
}

# Usar vers√£o h√≠brida
Copy-Item "package-extended.json" "package.json"
Copy-Item "server-hybrid.js" "server.js"

Write-Host "‚úÖ API configurada: compila contratos, usu√°rio paga deploy" -ForegroundColor Green

# Testar localmente se solicitado
if ($TestLocal) {
    Write-Host "üß™ Testando localmente..." -ForegroundColor Blue
    
    # Verificar se .env existe
    if (!(Test-Path ".env")) {
        Write-Host "‚ö†Ô∏è  Arquivo .env n√£o encontrado. Criando template..." -ForegroundColor Yellow
        
        $envContent = @"
# Configura√ß√µes do Servidor
PORT=3000
NODE_ENV=development

# Blockchain RPC URLs (apenas para consultas, SEM PRIVATE KEY!)
BSC_RPC=https://bsc-dataseed1.binance.org
BSC_TESTNET_RPC=https://data-seed-prebsc-1-s1.binance.org:8545

# Para compila√ß√£o Solidity
SOLC_VERSION=0.8.19
OPTIMIZATION_ENABLED=true
OPTIMIZATION_RUNS=200

# Rate Limiting
RATE_LIMIT_WINDOW=60000
RATE_LIMIT_MAX_REQUESTS=10
"@
        
        $envContent | Out-File -FilePath ".env" -Encoding UTF8
        
        Write-Host "üìù Template .env criado (SEM private keys!)" -ForegroundColor Green
        Write-Host "‚úÖ API n√£o precisa de chaves privadas - usu√°rio paga via MetaMask" -ForegroundColor Green
    }
    
    # Instalar depend√™ncias
    Write-Host "üì• Instalando depend√™ncias..." -ForegroundColor Blue
    npm install
    
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå Erro ao instalar depend√™ncias!" -ForegroundColor Red
        exit 1
    }
    
    # Testar inicializa√ß√£o
    Write-Host "üîç Testando inicializa√ß√£o da API..." -ForegroundColor Blue
    $job = Start-Job -ScriptBlock {
        Set-Location $using:PWD
        npm start
    }
    
    Start-Sleep -Seconds 10
    
    # Testar endpoint de sa√∫de
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:3000/health" -TimeoutSec 5
        if ($response.StatusCode -eq 200) {
            Write-Host "‚úÖ API funcionando localmente!" -ForegroundColor Green
        }
    } catch {
        Write-Host "‚ùå API n√£o responde localmente. Verifique logs." -ForegroundColor Red
    }
    
    # Parar o job
    Stop-Job $job -ErrorAction SilentlyContinue
    Remove-Job $job -ErrorAction SilentlyContinue
    
    Write-Host "üèÅ Teste local conclu√≠do." -ForegroundColor Blue
}

# Preparar para commit
Write-Host "üìù Preparando arquivos para commit..." -ForegroundColor Blue

# Verificar se h√° mudan√ßas
$gitStatus = git status --porcelain
if ($gitStatus) {
    Write-Host "üìã Arquivos modificados detectados:" -ForegroundColor Blue
    Write-Host $gitStatus -ForegroundColor Gray
    
    # Adicionar arquivos
    git add .
    
    # Commit
    $commitMessage = "Deploy: API H√≠brida (usu√°rio paga deploy) - $(Get-Date -Format 'yyyy-MM-dd HH:mm')"
    git commit -m $commitMessage
    
    Write-Host "‚úÖ Commit realizado: $commitMessage" -ForegroundColor Green
    
    # Push
    Write-Host "üì§ Enviando para reposit√≥rio..." -ForegroundColor Blue
    git push origin main
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Push realizado com sucesso!" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Erro no push. Verifique configura√ß√£o Git." -ForegroundColor Red
        exit 1
    }
} else {
    Write-Host "‚ÑπÔ∏è  Nenhuma mudan√ßa detectada nos arquivos." -ForegroundColor Yellow
}

# Exibir pr√≥ximos passos
Write-Host "`nüéØ PR√ìXIMOS PASSOS:" -ForegroundColor Cyan
Write-Host "1. Acesse https://render.com" -ForegroundColor White
Write-Host "2. Crie novo Web Service conectado ao seu reposit√≥rio" -ForegroundColor White
Write-Host "3. Configure:" -ForegroundColor White
Write-Host "   - Name: $RenderServiceName" -ForegroundColor Gray
Write-Host "   - Environment: Node" -ForegroundColor Gray
Write-Host "   - Root Directory: api/" -ForegroundColor Gray
Write-Host "   - Build Command: npm install" -ForegroundColor Gray
Write-Host "   - Start Command: npm start" -ForegroundColor Gray
Write-Host "4. Configure APENAS estas Environment Variables:" -ForegroundColor White
Write-Host "   - PORT = 10000" -ForegroundColor Gray
Write-Host "   - NODE_ENV = production" -ForegroundColor Gray
Write-Host "   - BSC_RPC = https://bsc-dataseed1.binance.org" -ForegroundColor Gray
Write-Host "   - SOLC_VERSION = 0.8.19" -ForegroundColor Gray
Write-Host "5. Aguarde o deploy autom√°tico" -ForegroundColor White

Write-Host "`n‚ú® VANTAGENS DESTA ABORDAGEM:" -ForegroundColor Yellow
Write-Host "- Sem private keys na API (mais seguro)" -ForegroundColor White
Write-Host "- Usu√°rio paga pr√≥prio deploy (sustent√°vel)" -ForegroundColor White
Write-Host "- MetaMask cuida de tudo (redes, gas, moedas)" -ForegroundColor White
Write-Host "- Deploy gratuito no Render Free Tier" -ForegroundColor White
Write-Host "- Implementa√ß√£o mais simples e r√°pida" -ForegroundColor White

Write-Host "`nüîó DOCUMENTA√á√ÉO COMPLETA:" -ForegroundColor Cyan
Write-Host "Consulte: DEPLOY_SIMPLE.md" -ForegroundColor White

Write-Host "`n‚úÖ Script de deploy conclu√≠do!" -ForegroundColor Green
Set-Location ".."
