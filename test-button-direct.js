console.log('üöÄ Testando bot√µes diretamente...');

// 1. Verificar se os bot√µes existem
const viewBtn = document.getElementById('view-contract-btn');
const verifyBtn = document.getElementById('verify-contract-btn');

console.log('üîç Bot√µes encontrados:');
console.log('   view-contract-btn:', !!viewBtn);
console.log('   verify-contract-btn:', !!verifyBtn);

// 2. Se encontrar o bot√£o visualizar, configurar diretamente
if (viewBtn) {
    console.log('‚úÖ Configurando bot√£o Visualizar...');
    
    // Simular dados b√°sicos
    window.AppState = window.AppState || {};
    window.AppState.tokenData = {
        name: 'Test Token',
        symbol: 'TST',
        totalSupply: '1000000',
        decimals: '18'
    };
    
    // Fun√ß√£o de teste simplificada
    viewBtn.onclick = function() {
        console.log('üñ±Ô∏è Bot√£o Visualizar clicado!');
        alert('Bot√£o funcionando! Vou mostrar um modal de teste...');
        
        // Criar modal simples para teste
        const modal = document.createElement('div');
        modal.style.cssText = `
            position: fixed; top: 50%; left: 50%; 
            transform: translate(-50%, -50%); 
            background: white; color: black; 
            padding: 20px; border-radius: 8px; 
            box-shadow: 0 4px 20px rgba(0,0,0,0.3); 
            z-index: 9999; max-width: 90%; max-height: 90%;
        `;
        
        modal.innerHTML = `
            <h3>üéâ Bot√£o Funcionando!</h3>
            <p>Dados simulados do token:</p>
            <ul>
                <li>Nome: ${window.AppState.tokenData.name}</li>
                <li>S√≠mbolo: ${window.AppState.tokenData.symbol}</li>
                <li>Supply: ${window.AppState.tokenData.totalSupply}</li>
            </ul>
            <button onclick="this.parentElement.remove()" style="padding: 5px 15px; background: #dc3545; color: white; border: none; border-radius: 4px;">Fechar</button>
        `;
        
        document.body.appendChild(modal);
        
        // Auto-remover ap√≥s 10 segundos
        setTimeout(() => {
            if (modal.parentElement) modal.remove();
        }, 10000);
    };
    
    // Habilitar o bot√£o (pode estar desabilitado)
    viewBtn.disabled = false;
    viewBtn.style.opacity = '1';
    viewBtn.style.pointerEvents = 'all';
    
    console.log('‚úÖ Bot√£o configurado! Clique nele agora para testar.');
    
} else {
    console.error('‚ùå Bot√£o view-contract-btn N√ÉO encontrado no DOM');
}

// 3. Mostrar a se√ß√£o de verifica√ß√£o (pode estar oculta)
const section = document.getElementById('section-veri');
if (section) {
    section.style.display = 'block';
    section.style.opacity = '1';
    section.style.visibility = 'visible';
    console.log('‚úÖ Se√ß√£o de verifica√ß√£o exibida');
} else {
    console.warn('‚ö†Ô∏è Se√ß√£o section-veri n√£o encontrada');
}

// 4. Verificar se existem outros elementos que possam estar bloqueando
const allButtons = document.querySelectorAll('button');
console.log(`üîç Total de bot√µes na p√°gina: ${allButtons.length}`);

// 5. Verificar se h√° overlays ou modals abertos
const modals = document.querySelectorAll('.modal');
const overlays = document.querySelectorAll('[style*="z-index"]');
console.log(`üîç Modals abertos: ${modals.length}`);
console.log(`üîç Elementos com z-index: ${overlays.length}`);

console.log('üß™ Teste configurado! Se o bot√£o existir, deve funcionar agora.');
