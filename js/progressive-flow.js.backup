class ProgressiveFlow {
    constructor() {
        this.currentSection = 'wallet';
        this.completedSections = new Set();
        this.sectionData = {};
        this.walletConnected = false;
        this.checkingConnection = false; // Flag para evitar verifica√ß√µes m√∫ltiplas
        this.supportedNetworks = []; // Cache das redes suportadas
        this.api = null; // Inst√¢ncia da API
        this.currentNetwork = null; // Rede atual da carteira
        
        this.initializeFlow();
    }

    initializeFlow() {
        console.log('Inicializando Progressive Flow...');
        
        // Inicializar API
        this.initializeAPI();
        
        // Aguardar add-index.js estar carregado
        this.waitForAddIndexReady().then(() => {
            // Inicializar seletores de rede
            this.initializeNetworkSelectors();
            
            // Configurar eventos dos formul√°rios
            this.setupFormEvents();
            
            // Verificar se j√° existe conex√£o de carteira
            this.checkIfAlreadyConnected();
            
            // Configurar observador de mudan√ßas na carteira
            this.setupWalletEventListeners();
        });
    }
    
    
    initializeAPI() {
        // Inicializar cliente da API
        if (typeof TokenDeployAPI !== 'undefined') {
            this.api = new TokenDeployAPI();
            console.log('API Client inicializada');
        } else {
            console.warn('TokenDeployAPI n√£o encontrada. Deploy via API n√£o estar√° dispon√≠vel.');
        }
    }
    
    async initializeNetworkSelectors() {
        try {
            if (this.api) {
                console.log('Carregando redes suportadas da API...');
                const networks = await this.api.getSupportedNetworksForUI();
                this.supportedNetworks = networks;
                
                // N√£o popular seletor - usar rede da carteira
                console.log(`‚úÖ ${this.supportedNetworks.length} redes carregadas no cache`);
            } else {
                // Fallback para redes fixas
                console.log('Usando redes fixas (fallback)');
                this.supportedNetworks = [
                    { name: 'BSC Mainnet', chainId: 56, symbol: 'BNB', displayName: 'BSC Mainnet (BNB)' },
                    { name: 'BSC Testnet', chainId: 97, symbol: 'tBNB', displayName: 'BSC Testnet (tBNB)' },
                    { name: 'Ethereum', chainId: 1, symbol: 'ETH', displayName: 'Ethereum (ETH)' },
                    { name: 'Polygon', chainId: 137, symbol: 'MATIC', displayName: 'Polygon (MATIC)' }
                ];
            }
        } catch (error) {
            console.error('Erro ao carregar redes:', error);
            // Usar fallback em caso de erro
            this.supportedNetworks = [
                { name: 'BSC Mainnet', chainId: 56, symbol: 'BNB', displayName: 'BSC Mainnet (BNB)' },
                { name: 'BSC Testnet', chainId: 97, symbol: 'tBNB', displayName: 'BSC Testnet (tBNB)' }
            ];
        }
    }
    
    
    async detectWalletNetwork() {
        try {
            if (typeof window.ethereum === 'undefined') {
                throw new Error('MetaMask n√£o detectado');
            }

            const provider = new ethers.providers.Web3Provider(window.ethereum);
            const network = await provider.getNetwork();
            
            console.log('Rede detectada da carteira:', network);
            
            // Converter chainId para n√∫mero se for string hexadecimal
            let chainId = network.chainId;
            if (typeof chainId === 'string' && chainId.startsWith('0x')) {
                chainId = parseInt(chainId, 16);
            } else if (typeof chainId === 'string') {
                chainId = parseInt(chainId);
            }
            
            // Encontrar informa√ß√µes da rede
            const networkInfo = this.supportedNetworks.find(n => n.chainId === chainId);
            
            if (networkInfo) {
                console.log('‚úÖ Rede suportada:', networkInfo);
                this.currentNetwork = {
                    chainId: chainId,
                    name: networkInfo.name,
                    symbol: networkInfo.symbol,
                    supported: true
                };
            } else {
                console.warn('‚ö†Ô∏è Rede n√£o suportada pelo sistema, mas usando deploy direto');
                
                // Mapear nomes conhecidos
                const knownNetworks = {
                    1: { name: 'Ethereum', symbol: 'ETH' },
                    56: { name: 'BSC Mainnet', symbol: 'BNB' },
                    97: { name: 'BSC Testnet', symbol: 'tBNB' },
                    137: { name: 'Polygon', symbol: 'MATIC' },
                    43114: { name: 'Avalanche', symbol: 'AVAX' },
                    250: { name: 'Fantom', symbol: 'FTM' }
                };
                
                const knownNetwork = knownNetworks[chainId];
                
                this.currentNetwork = {
                    chainId: chainId,
                    name: knownNetwork?.name || network.name || `Rede ${chainId}`,
                    symbol: knownNetwork?.symbol || 'ETH',
                    supported: false // Usar√° deploy direto
                };
            }
            
            console.log('üåê Rede atual configurada:', this.currentNetwork);
            
            this.updateNetworkDisplay();
            await this.updateDeployCostEstimate();
            this.updateDeployButton();
            
            return this.currentNetwork;
            
        } catch (error) {
            console.error('Erro ao detectar rede:', error);
            
            // Fallback
            this.currentNetwork = {
                chainId: 97, // BSC Testnet
                name: 'BSC Testnet',
                symbol: 'tBNB',
                supported: false // Usar√° deploy direto como fallback
            };
            
            this.updateNetworkDisplay();
            return this.currentNetwork;
        }
    }
    
    updateNetworkDisplay() {
        const networkDetails = document.getElementById('network-details');
        if (!networkDetails || !this.currentNetwork) return;
        
        const statusIcon = this.currentNetwork.supported 
            ? '<i class="bi bi-check-circle text-success me-1"></i>' 
            : '<i class="bi bi-exclamation-triangle text-warning me-1"></i>';
            
        const supportText = this.currentNetwork.supported 
            ? 'Suportada para deploy' 
            : 'Rede n√£o suportada - ser√° usado deploy direto';
            
        networkDetails.innerHTML = `
            <div class="d-flex align-items-center mb-1">
                ${statusIcon}
                <strong>${this.currentNetwork.name} (${this.currentNetwork.symbol})</strong>
            </div>
            <div class="text-muted small">
                Chain ID: ${this.currentNetwork.chainId} ‚Ä¢ ${supportText}
            </div>
        `;
    }
    
    updateDeployButton() {
        const deployBtn = document.getElementById('deploy-token-btn');
        if (!deployBtn || !this.currentNetwork) return;
        
        const isWalletConnected = this.sectionData.wallet && this.walletConnected;
        const hasBasicInfo = this.sectionData.basicinfo;
        
        if (isWalletConnected && hasBasicInfo) {
            deployBtn.disabled = false;
            deployBtn.innerHTML = `<i class="bi bi-rocket-takeoff me-2"></i>CRIAR TOKEN NA ${this.currentNetwork.name.toUpperCase()}`;
        } else {
            deployBtn.disabled = true;
            deployBtn.innerHTML = '<i class="bi bi-rocket-takeoff me-2"></i>CRIAR TOKEN';
        }
    }
    
    async updateDeployCostEstimate() {
        const costElement = document.getElementById('deploy-cost-estimate');
        
        if (!this.currentNetwork) {
            if (costElement) costElement.textContent = 'Detectando rede da carteira...';
            return;
        }
        
        const chainId = this.currentNetwork.chainId;
        
        try {
            if (this.api && this.currentNetwork.supported) {
                const estimate = await this.api.estimateDeployCost(chainId);
                if (costElement) {
                    costElement.innerHTML = `
                        <strong>Custo estimado:</strong> ${estimate.costDisplay}<br>
                        <small>Gas: ${estimate.gasPrice} (limite: ${estimate.gasLimit})</small>
                    `;
                }
            } else {
                // Fallback para estimativas fixas
                const estimates = {
                    1: '~0.02 ETH ($30-60)',
                    56: '~0.003 BNB ($1-2)',
                    97: '~0.003 tBNB (Testnet)',
                    137: '~0.01 MATIC ($0.01)',
                    43114: '~0.01 AVAX ($0.30)',
                    250: '~0.1 FTM ($0.10)'
                };
                
                const estimate = estimates[chainId] || '~0.01 ETH';
                if (costElement) {
                    const method = this.currentNetwork.supported ? 'via API' : 'deploy direto';
                    costElement.innerHTML = `<strong>Custo estimado:</strong> ${estimate}<br><small>M√©todo: ${method}</small>`;
                }
            }
        } catch (error) {
            console.error('Erro ao estimar custo:', error);
            if (costElement) {
                costElement.textContent = 'Erro ao calcular estimativa';
            }
        }
    }
    
    async waitForAddIndexReady() {
        return new Promise((resolve) => {
            const checkReady = () => {
                // Verificar se as fun√ß√µes do add-index.js est√£o dispon√≠veis
                if (typeof window.connectWallet === 'function') {
                    console.log('add-index.js detectado e pronto');
                    resolve();
                } else {
                    console.log('Aguardando add-index.js...');
                    setTimeout(checkReady, 100);
                }
            };
            checkReady();
        });
    }

    setupFormEvents() {
        // Bot√µes de navega√ß√£o
        const walletNextBtn = document.getElementById('wallet-next-btn');
        const basicPrevBtn = document.getElementById('basic-info-prev-btn');
        const basicNextBtn = document.getElementById('basic-info-next-btn');
        const deployPrevBtn = document.getElementById('deploy-prev-btn');

        if (walletNextBtn) {
            walletNextBtn.addEventListener('click', () => {
                this.enableSection('basicinfo');
            });
        }
        
        // Listener para o evento customizado disparado pelo add-index.js
        document.addEventListener('walletConnected', (event) => {
            console.log('Progressive Flow recebeu evento walletConnected:', event.detail);
            
            // Prevenir processamento duplo
            if (!this.walletConnected) {
                this.handleWalletComplete(event.detail);
            } else {
                console.log('Progressive Flow: Wallet j√° processada, ignorando evento duplicado');
            }
        });
        
        // Listener adicional para o bot√£o conectar (para casos onde add-index.js n√£o funciona)
        const connectBtn = document.getElementById('connect-metamask-btn');
        if (connectBtn) {
            connectBtn.addEventListener('click', async () => {
                // Se add-index.js n√£o estiver funcionando, fazer conex√£o direta
                await this.connectWalletDirectly();
            });
        }
        
        if (basicPrevBtn) {
            basicPrevBtn.addEventListener('click', () => {
                this.enableSection('wallet');
            });
        }
        
        if (basicNextBtn) {
            basicNextBtn.addEventListener('click', () => {
                this.enableSection('deploy');
                this.updateDeployInfo();
            });
        }
        
        if (deployPrevBtn) {
            deployPrevBtn.addEventListener('click', () => {
                this.enableSection('basicinfo');
            });
        }
        
        // Bot√£o limpar e recome√ßar
        const clearAllBtn = document.getElementById('clear-all-btn');
        if (clearAllBtn) {
            clearAllBtn.addEventListener('click', () => this.resetFlow());
        }
        
        // Eventos do formul√°rio de informa√ß√µes b√°sicas + owner
        const tokenName = document.getElementById('tokenName');
        const tokenSymbol = document.getElementById('tokenSymbol');  
        const totalSupply = document.getElementById('totalSupply');
        const decimals = document.getElementById('decimals');
        const ownerAddress = document.getElementById('ownerAddress');
        const tokenImage = document.getElementById('tokenImage');
        
        if (tokenName) tokenName.addEventListener('input', () => this.validateBasicInfo());
        if (tokenSymbol) tokenSymbol.addEventListener('input', () => this.validateBasicInfo());
        if (totalSupply) {
            totalSupply.addEventListener('input', (e) => {
                this.formatSupplyInput(e);
                this.validateBasicInfo();
            });
        }
        if (decimals) decimals.addEventListener('input', () => this.validateBasicInfo());
        if (ownerAddress) ownerAddress.addEventListener('input', () => this.validateBasicInfo());
        if (tokenImage) tokenImage.addEventListener('input', () => this.validateBasicInfo());
        
        // Bot√£o de deploy
        const deployBtn = document.getElementById('deploy-token-btn');
        if (deployBtn) {
            deployBtn.addEventListener('click', () => this.handleDeploy());
        }
    }

    formatSupplyInput(event) {
        let value = event.target.value.replace(/[^\d]/g, '');
        
        if (value) {
            // Formata√ß√£o com separadores de milhares
            const formattedValue = new Intl.NumberFormat('pt-BR').format(value);
            event.target.value = formattedValue;
        }
    }

    setupWalletEventListeners() {
        if (window.ethereum) {
            window.ethereum.on('accountsChanged', (accounts) => {
                if (accounts.length === 0) {
                    this.handleWalletDisconnect();
                } else {
                    this.checkIfAlreadyConnected();
                }
            });

            window.ethereum.on('chainChanged', (chainId) => {
                this.updateNetworkInfo(chainId);
            });
        }
    }

    async checkIfAlreadyConnected() {
        if (this.checkingConnection) {
            console.log('Progressive Flow: Verifica√ß√£o j√° em andamento, ignorando...');
            return;
        }
        
        this.checkingConnection = true;
        
        try {
            if (window.ethereum && !this.walletConnected) {
                const accounts = await window.ethereum.request({ method: 'eth_accounts' });
                
                if (accounts.length > 0) {
                    const chainId = await window.ethereum.request({ method: 'eth_chainId' });
                    const networkName = this.getNetworkName(chainId);
                    
                    const walletData = {
                        address: accounts[0],
                        network: networkName,
                        chainId: chainId
                    };
                    
                    console.log('Progressive Flow: Carteira j√° conectada detectada:', walletData.address);
                    this.handleWalletComplete(walletData);
                } else {
                    console.log('Progressive Flow: Nenhuma carteira conectada detectada');
                }
            } else if (this.walletConnected) {
                console.log('Progressive Flow: Wallet j√° est√° conectada no estado interno');
            }
        } catch (error) {
            console.log('Erro ao verificar conex√£o:', error);
        } finally {
            this.checkingConnection = false;
        }
    }

    getNetworkName(chainId) {
        const networks = {
            '0x1': 'Ethereum',
            '0x38': 'BSC Mainnet', 
            '0x61': 'BSC Testnet',
            '0x89': 'Polygon',
            '0x13881': 'Mumbai Testnet'
        };
        
        return networks[chainId] || `Rede (${parseInt(chainId, 16)})`;
    }

    updateNetworkInfo(chainId) {
        const networkName = this.getNetworkName(chainId);
        
        // Atualizar dados do formul√°rio se j√° preenchidos
        if (this.sectionData.wallet) {
            this.sectionData.wallet.network = networkName;
            this.sectionData.wallet.chainId = chainId;
        }
    }

    handleWalletComplete(walletData) {
        console.log('Carteira conectada com sucesso:', walletData);
        
        this.walletConnected = true;
        this.sectionData.wallet = walletData;
        
        // Sincronizar com as vari√°veis globais do add-index.js
        if (typeof window.walletConnected !== 'undefined') {
            window.walletConnected = true;
        }
        if (typeof window.walletAddress !== 'undefined') {
            window.walletAddress = walletData.address;
        }
        if (typeof window.networkData !== 'undefined') {
            window.networkData = {
                name: walletData.network,
                chainId: walletData.chainId
            };
        }
        
        // Detectar rede da carteira para deploy
        this.detectWalletNetwork();
        
        // Marcar se√ß√£o wallet como completa
        this.markSectionComplete('wallet', walletData);
        
        // Mostrar informa√ß√µes da carteira conectada
        this.displayWalletInfo(walletData);
        
        // Auto-preencher endere√ßo do propriet√°rio
        const ownerAddress = document.getElementById('ownerAddress');
        if (ownerAddress && !ownerAddress.value) {
            ownerAddress.value = walletData.address;
        }
        
        // Auto-preencher rede de deploy
        const networkDisplay = document.getElementById('network-display');
        if (networkDisplay) {
            networkDisplay.value = walletData.network;
        }
        
        // Avan√ßar automaticamente para b√°sica
        setTimeout(() => {
            this.enableSection('basicinfo');
        }, 1000);
    }

    handleWalletDisconnect() {
        console.log('Carteira desconectada');
        
        this.walletConnected = false;
        delete this.sectionData.wallet;
        this.completedSections.delete('wallet');
        
        // Resetar para se√ß√£o inicial
        this.resetToSection('wallet');
    }

    displayWalletInfo(walletData) {
        // Atualizar campo de status da carteira
        const walletStatus = document.getElementById('wallet-status');
        if (walletStatus) {
            walletStatus.value = `${walletData.address.substring(0, 6)}...${walletData.address.substring(38)} (${walletData.network})`;
        }
        
        // Mostrar informa√ß√µes detalhadas da carteira
        const walletConnectionInfo = document.getElementById('wallet-connection-info');
        if (walletConnectionInfo) {
            walletConnectionInfo.style.display = 'block';
            
            // Preencher endere√ßo
            const connectedAddress = document.getElementById('connected-address');
            if (connectedAddress) {
                connectedAddress.textContent = walletData.address;
            }
            
            // Buscar e exibir saldo
            this.updateWalletBalance(walletData.address);
        }
        
        // Mostrar se√ß√£o de informa√ß√µes da rede (vers√£o simples - ocultar para evitar duplica√ß√£o)
        const networkInfoSection = document.getElementById('network-info-section');
        if (networkInfoSection) {
            networkInfoSection.style.display = 'none';
        }
        
        // Atualizar informa√ß√µes da rede (na vers√£o detalhada)
        const currentNetwork = document.getElementById('current-network');
        if (currentNetwork) {
            currentNetwork.textContent = walletData.network;
        }
        
        const chainIdValue = document.getElementById('chain-id-value');
        if (chainIdValue) {
            chainIdValue.textContent = parseInt(walletData.chainId, 16);
        }
        
        // Atualizar bot√£o conectar
        const connectBtn = document.getElementById('connect-metamask-btn');
        if (connectBtn) {
            connectBtn.innerHTML = '<i class="bi bi-check-circle-fill me-2"></i>CONECTADO';
            connectBtn.classList.remove('btn-warning');
            connectBtn.classList.add('btn-success');
            connectBtn.disabled = false;
        }
        
        // Mostrar bot√£o "Pr√≥ximo" da se√ß√£o wallet
        const walletNextBtn = document.getElementById('wallet-next-btn');
        if (walletNextBtn) {
            walletNextBtn.style.display = 'block';
        }
    }

    async updateWalletBalance(address) {
        try {
            if (window.ethereum) {
                const balance = await window.ethereum.request({
                    method: 'eth_getBalance',
                    params: [address, 'latest']
                });
                
                // Converter de wei para BNB
                const balanceInBNB = parseInt(balance, 16) / Math.pow(10, 18);
                const balanceDisplay = document.getElementById('wallet-balance');
                
                if (balanceDisplay) {
                    balanceDisplay.innerHTML = `<strong>${balanceInBNB.toFixed(4)} BNB</strong>`;
                    
                    // Avisar se saldo muito baixo para deploy
                    if (balanceInBNB < 0.01) {
                        balanceDisplay.innerHTML += ' <i class="bi bi-exclamation-triangle text-warning ms-1" title="Saldo baixo para deploy"></i>';
                    }
                }
            }
        } catch (error) {
            console.error('Erro ao buscar saldo:', error);
            const balanceDisplay = document.getElementById('wallet-balance');
            if (balanceDisplay) {
                balanceDisplay.textContent = 'Erro ao carregar';
            }
        }
    }

    async connectWalletDirectly() {
        try {
            if (typeof window.ethereum === 'undefined') {
                alert('MetaMask n√£o detectado! Por favor, instale a MetaMask.');
                return;
            }
            
            console.log('Progressive Flow conectando diretamente com MetaMask...');
            
            // Solicita conex√£o
            const accounts = await window.ethereum.request({
                method: 'eth_requestAccounts'
            });
            
            if (accounts.length > 0) {
                const chainId = await window.ethereum.request({
                    method: 'eth_chainId'
                });
                
                const networkName = this.getNetworkName(chainId);
                
                const walletData = {
                    address: accounts[0],
                    network: networkName,
                    chainId: chainId
                };
                
                this.handleWalletComplete(walletData);
            }
            
        } catch (error) {
            console.error('Erro ao conectar wallet diretamente:', error);
            alert('Erro ao conectar com a MetaMask: ' + error.message);
        }
    }

    validateBasicInfo() {
        const tokenName = document.getElementById('tokenName')?.value.trim();
        const tokenSymbol = document.getElementById('tokenSymbol')?.value.trim();
        const totalSupply = document.getElementById('totalSupply')?.value.trim();
        const ownerAddress = document.getElementById('ownerAddress')?.value.trim();
        
        const isValid = tokenName && tokenSymbol && totalSupply && ownerAddress && this.isValidEthereumAddress(ownerAddress);
        
        // Mostrar/ocultar bot√£o pr√≥ximo
        const nextBtn = document.getElementById('basic-info-next-btn');
        if (nextBtn) {
            nextBtn.style.display = isValid ? 'inline-block' : 'none';
        }
        
        if (isValid) {
            const basicData = {
                name: tokenName,
                symbol: tokenSymbol,
                decimals: parseInt(document.getElementById('decimals')?.value) || 18,
                totalSupply: this.parseSupplyValue(totalSupply),
                owner: ownerAddress,
                image: document.getElementById('tokenImage')?.value.trim() || ''
            };
            
            this.markSectionComplete('basicinfo', basicData);
        } else {
            this.markSectionIncomplete('basicinfo');
        }
        
        return isValid;
    }

    isValidEthereumAddress(address) {
        return /^0x[a-fA-F0-9]{40}$/.test(address);
    }

    parseSupplyValue(value) {
        // Remove formata√ß√£o de milhares e espa√ßos
        const cleanValue = value.replace(/[^\d,]/g, '').replace(/,/g, '.');
        
        // Remove sufixos como 'M', 'B', 'K' se existirem
        const match = cleanValue.match(/^([\d.]+)([KMB]?)$/i);
        if (!match) return cleanValue.replace(/\./g, '');
        
        const [, number, suffix] = match;
        const multipliers = { K: 1000, M: 1000000, B: 1000000000 };
        const multiplier = multipliers[suffix.toUpperCase()] || 1;
        
        return (parseFloat(number) * multiplier).toString();
    }

    updateDeployInfo() {
        const tokenSummary = document.getElementById('token-summary');
        if (!tokenSummary || !this.sectionData.wallet || !this.sectionData.basicinfo) return;
        
        const { network, address } = this.sectionData.wallet;
        const { name, symbol, decimals, totalSupply, owner, image } = this.sectionData.basicinfo;
        
        // Detectar rede da carteira se n√£o foi detectado ainda
        if (!this.currentNetwork) {
            this.detectWalletNetwork();
        }
        
        tokenSummary.innerHTML = `
            <div class="col-md-6">
                <p><strong>Nome:</strong> ${name}</p>
                <p><strong>S√≠mbolo:</strong> ${symbol}</p>
                <p><strong>Decimais:</strong> ${decimals}</p>
                <p><strong>Supply Total:</strong> ${new Intl.NumberFormat('pt-BR').format(totalSupply)}</p>
            </div>
            <div class="col-md-6">
                <p><strong>Propriet√°rio:</strong> ${owner.substring(0, 6)}...${owner.substring(38)}</p>
                <p><strong>Rede:</strong> ${network}</p>
                <p><strong>Carteira:</strong> ${address.substring(0, 6)}...${address.substring(38)}</p>
                ${image ? `<p><strong>Logo:</strong> <a href="${image}" target="_blank">Ver imagem</a></p>` : ''}
            </div>
        `;
        
        // Habilitar bot√£o de deploy
        const deployBtn = document.getElementById('deploy-token-btn');
        if (deployBtn) {
            deployBtn.disabled = false;
        }
    }

    markSectionComplete(sectionName, data) {
        this.completedSections.add(sectionName);
        this.sectionData[sectionName] = { ...this.sectionData[sectionName], ...data };
        
        // Atualizar indicador visual
        const indicator = document.querySelector(`[data-section="${sectionName}"] .section-indicator`);
        if (indicator) {
            indicator.innerHTML = '<i class="bi bi-check-circle-fill text-success"></i>';
        }
        
        console.log(`Se√ß√£o ${sectionName} marcada como completa:`, data);
    }

    markSectionIncomplete(sectionName) {
        this.completedSections.delete(sectionName);
        
        // Atualizar indicador visual
        const indicator = document.querySelector(`[data-section="${sectionName}"] .section-indicator`);
        if (indicator) {
            indicator.innerHTML = '<i class="bi bi-circle text-muted"></i>';
        }
    }

    enableSection(sectionName) {
        // Mapeamento dos nomes para IDs das se√ß√µes
        const sectionIds = {
            'wallet': 'section-wallet',
            'basicinfo': 'section-basic-info', 
            'deploy': 'section-deploy',
            'result': 'section-result'
        };
        
        // Desabilitar todas as se√ß√µes primeiro
        const allSections = document.querySelectorAll('.creation-section');
        allSections.forEach(section => {
            section.style.display = 'none';
            section.classList.remove('active');
        });
        
        // Habilitar se√ß√£o atual
        const sectionId = sectionIds[sectionName];
        const targetSection = document.getElementById(sectionId);
        if (targetSection) {
            targetSection.style.display = 'block';
            targetSection.classList.add('active');
            
            // Scroll suave para a se√ß√£o
            targetSection.scrollIntoView({ 
                behavior: 'smooth', 
                block: 'start',
                inline: 'nearest'
            });
        }
        
        this.currentSection = sectionName;
        console.log(`Se√ß√£o habilitada: ${sectionName} (${sectionId})`);
    }

    async handleDeploy() {
        try {
            console.log('üöÄ Iniciando deploy...');
            
            // Desabilitar bot√£o durante deploy
            const deployBtn = document.getElementById('deploy-token-btn');
            if (deployBtn) {
                deployBtn.disabled = true;
                deployBtn.innerHTML = '<i class="bi bi-hourglass-split me-2"></i>Preparando Deploy...';
            }

            // Coletar dados do formul√°rio
            const tokenData = this.collectFormData();
            console.log('üìã Dados do token para deploy:', tokenData);
            
            // Validar rede atual
            if (!this.currentNetwork || !this.currentNetwork.chainId) {
                throw new Error('Rede n√£o detectada. Tente reconectar a carteira.');
            }

            // Adicionar chainId aos dados do token
            const deployData = {
                ...tokenData,
                chainId: this.currentNetwork.chainId
            };

            // Atualizar progresso
            this.updateDeployProgress('Preparando deploy...', 20);

            // Tentar deploy via API se a rede for suportada
            if (this.currentNetwork.supported && typeof TokenDeployManager !== 'undefined') {
                try {
                    console.log('‚úÖ Tentando deploy via API...');
                    this.updateDeployProgress('Conectando com API...', 40);
                    
                    const deployManager = new TokenDeployManager();
                    const result = await deployManager.deployToken(deployData);
                    
                    if (result.success) {
                        console.log('üéâ Deploy via API bem-sucedido!');
                        this.updateDeployProgress('Token criado com sucesso!', 100);
                        this.handleDeploySuccess(result);
                        return;
                    } else {
                        throw new Error(result.error || 'Deploy falhou via API');
                    }
                } catch (apiError) {
                    console.log('‚ö†Ô∏è API falhou, usando deploy direto:', apiError.message);
                }
            }
            
            // Fallback para deploy direto
            console.log('üîÑ Usando deploy direto...');
            this.updateDeployProgress('Deploy direto via carteira...', 60);
            
            const directResult = await this.deployTokenContract(deployData);
            
            if (directResult.success) {
                console.log('‚úÖ Deploy direto bem-sucedido!');
                this.updateDeployProgress('Token criado com sucesso!', 100);
                this.handleDeploySuccess(directResult);
            } else {
                this.handleDeployError(directResult);
            }

        } catch (error) {
            console.error('‚ùå Erro no deploy:', error);
            this.handleDeployError({
                success: false,
                error: error.message,
                message: `Erro no deploy: ${error.message}`
            });
        }
    }

    updateDeployProgress(message, percentage) {
        const deployBtn = document.getElementById('deploy-token-btn');
        if (deployBtn) {
            deployBtn.innerHTML = `<i class="bi bi-hourglass-split me-2"></i>${message}`;
        }
        
        // Atualizar barra de progresso se existir
        const progressBar = document.getElementById('deploy-progress');
        if (progressBar) {
            progressBar.style.width = `${percentage}%`;
            progressBar.setAttribute('aria-valuenow', percentage);
        }
    }

    collectFormData() {
        const totalSupplyField = document.getElementById('totalSupply');
        const totalSupplyValue = totalSupplyField ? this.parseSupplyValue(totalSupplyField.value) : '';
        
        return {
            name: document.getElementById('tokenName')?.value || '',
            symbol: document.getElementById('tokenSymbol')?.value || '',
            decimals: parseInt(document.getElementById('decimals')?.value) || 18,
            totalSupply: totalSupplyValue,
            owner: document.getElementById('ownerAddress')?.value || '',
            image: document.getElementById('tokenImage')?.value || ''
        };
    }

    async deployTokenContract(tokenData) {
        try {
            console.log('üöÄ Iniciando deploy REAL do token:', tokenData.name);
            
            // Verificar se o ethers est√° dispon√≠vel
            if (typeof window.ethers === 'undefined') {
                throw new Error('Ethers.js n√£o carregado');
            }
            
            // Conectar com o provider
            const provider = new ethers.providers.Web3Provider(window.ethereum);
            const signer = provider.getSigner();
            
            // Contrato ERC-20 simples e funcional
            const contractABI = [
                "constructor(string memory name_, string memory symbol_, uint256 totalSupply_)",
                "function name() view returns (string memory)",
                "function symbol() view returns (string memory)", 
                "function decimals() view returns (uint8)",
                "function totalSupply() view returns (uint256)",
                "function balanceOf(address account) view returns (uint256)",
                "function transfer(address to, uint256 amount) returns (bool)",
                "event Transfer(address indexed from, address indexed to, uint256 value)"
            ];
            
            // Bytecode ERC-20 simples (sem decimals customizado)
            const contractBytecode = "0x608060405234801561001057600080fd5b5060405161083238038061083283398101604052810190610030919061018e565b82600090816100409190610400565b50816001908161005091906104005b5080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508060038190555050505061052a565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6100f1826100a8565b810181811067ffffffffffffffff821117156101105761010f6100b9565b5b80604052505050565b60006101236100a4565b905061012f82826100e8565b919050565b600067ffffffffffffffff82111561014f5761014e6100b9565b5b610158826100a8565b9050602081019050919050565b60008151905061017481610520565b92915050565b60008151905061018981610527565b92915050565b6000602082840312156101a5576101a461009e565b5b60006101b384828501610165565b915050929190505650565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061020357607f821691505b602082108103610216576102156101cc565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026102786000198261023b565b6102828683610248565b95508019841693508086168417925050509392505050565b6000819050919050565b60006102bf6102ba6102b584610296565b61029a565b610296565b9050919050565b6000819050919050565b6102d983610248565b6102ed6102e5826102c6565b848454610296565b825550505050565b600090565b610302610248565b61030d8482846102d0565b505050565b5b8181101561033157610326600082610248565b600181019050610313565b5050565b601f82111561037657610347816101eb565b610350846101fd565b8101602085101561035f578190505b61037361036b856101fd565b830182610312565b50505b505050565b600082821c905092915050565b600061039960001984600802610248565b1980831691505092915050565b60006103b2838361037b565b9150826002028217905092915050565b6103cb826101bf565b67ffffffffffffffff8111156103e4576103e36100b9565b5b6103ee82546101ea565b6103f9828285610335565b600060209050601f83116001811461042c576000841561041a578287015190505b61042485826103a6565b86555061048c565b601f19841661043a866101eb565b60005b828110156104625784890151825560018201915060208501945060208101905061043d565b8683101561047f578489015161047b601f89168261037b565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b50565b60006104af600083610494565b91506104ba8261049f565b600082019050919050565b60006104d0826104a2565b91505919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061051182610296565b915061051c83610296565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561055157610550610248565b5b828201905092915050565b6105658161029a565b8114610570575f80fd5b50565b61057c81610296565b8114610587575f80fd5b50565b6102d3806105996000396000f3fe608060405234801561001057600080fd5b506004361061008570003560e01c8063095ea7b31161006357806318160ddd1161005157806318160ddd146101095780635ecb61261461012757806395d89b411461014557610085565b8063095ea7b3146100ad57806318160ddd146100dd57610085565b806306fdde031461008a5780630755e29114610095578063095ea7b31461009d575b600080fd5b610093610163565b005b61009b6101f5565b005b6100b760048036038101906100b2919061021e565b61020c565b6040516100c49190610279565b60405180910390f35b6100e5610235565b005b6100f161023c565b6040516100fe9190610294565b60405180910390f35b61010f610246565b005b610111610265565b60405161011e9190610294565b60405180910390f35b61012f61026b565b60405161013c9190610294565b60405180910390f35b61014d610275565b60405161015a91906102ff565b60405180910390f35b606060008054610172906103505b905090565b806001600160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610179919061039c565b92505081905550506001600160003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b600160005b90509050565b600061017c61020661020e565b90829050919050565b61022061024a610307565b8261023892505f81905550505050565b606060018054610180906103505b9050905056";
            
            // Deploy com totalSupply em wei
            const totalSupplyWei = ethers.utils.parseUnits(tokenData.totalSupply.toString(), 18);565b61047f8061050c6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806370a082311161005b57806370a08231146101065780638da5cb5b1461013657806395d89b4114610154578063a9059cbb1461017257610088565b806306fdde031461008d57806318160ddd146100ab57806323b872dd146100c9578063313ce567146100f9575b600080fd5b6100956101a2565b6040516100a29190610324565b60405180910390f35b6100b3610230565b6040516100c09190610346565b60405180910390f35b6100e360048036038101906100de9190610397565b61023a565b6040516100f091906103ea565b60405180910390f35b61010161024a565b60405161010d9190610421565b60405180910390f35b610120600480360381019061011b919061043c565b610261565b60405161012d9190610346565b60405180910390f35b61013e6102aa565b60405161014b9190610478565b60405180910390f35b61015c6102d0565b6040516101699190610324565b60405180910390f35b61018c60048036038101906101879190610493565b61035e565b60405161019991906103ea565b60405180910390f35b600080546101af906104d3565b80601f01602080910402602001604051908101604052809291908181526020018280546101db906104d3565b80156102285780601f106101fd57610100808354040283529160200191610228565b820191906000526020600020905b81548152906001019060200180831161020b57829003601f168201915b505050505081565b6000600354905090565b600061024683836103b7565b9050919050565b6000600260009054906101000a900460ff16905090565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600180546102dd906104d3565b80601f0160208091040260200160405190810160405280929190818152602001828054610309906104d3565b80156103565780601f1061032b57610100808354040283529160200191610356565b820191906000526020600020905b81548152906001019060200180831161033957829003601f168201915b505050505081565b60006103b283836000803073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461035e919061050a565b9050919050565b600080600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156103d7578091505061041b565b82816103e3919061053e565b600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555082600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600191505b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156104535780820151818401526020810190506103fd565b83811115610462576000848401525b50505050565b6000601f19601f8301169050919050565b600061048b82610421565b610495818561042c565b93506104a581856020860161043d565b6104ae81610468565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006104ee826104b9565b9050919050565b610506816104d9565b8114610511575f80fd5b50565b600081359050610523816104fd565b92915050565b600060ff82169050919050565b61053f81610529565b8114610549575f80fd5b50565b60008135905061055b81610536565b92915050565b6000806000806080858703121561057b5761057a610572565b5b60006105898782880161050a565b945050602061059a8782880161050a565b93505060406105ab8782880161054c565b92505060606105bc8782880161054c565b91505092959194509250565b6000602082019050818103600083015261058282846104ca565b905092915050565b61059381610506565b82525050565b60006020820190506105ae600083018461058a565b92915050565b60008115159050919050565b6105c9816105b4565b82525050565b60006020820190506105e460008301846105c0565b92915050565b6105f381610529565b82525050565b600060208201905061060e60008301846105ea565b92915050565b60008060408385031215610627576106266105f8565b5b600061063585828601610514565b925050602061064685828601610514565b9150509250929050565b600080600060608486031215610669576106686105f8565b5b600061067786828701610514565b935050602061068886828701610514565b925050604061069986828701610514565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806106e957607f821691505b602082108114156106fd576106fc6106a3565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061073e82610506565b915061074983610506565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561077e5761077d610703565b5b828201905092915050565b600061079482610506565b915061079f83610506565b9250828210156107b2576107b1610703565b5b82820390509291505056fea26469706673582212207f8a9b4c3d2e1f0a6b5c4d3e2f1a0b9c8d7e6f5a4b3c2d1e0f9a8b7c6d5e4f364736f6c63430008110033";
            
            // Preparar dados do constructor
            const totalSupplyWei = ethers.utils.parseUnits(tokenData.totalSupply.toString(), tokenData.decimals);
            
            console.log('Dados para deploy:', {
                name: tokenData.name,
                symbol: tokenData.symbol,
                totalSupply: totalSupplyWei.toString(),
                decimals: tokenData.decimals
            });

            // Criar factory do contrato
            const contractFactory = new ethers.ContractFactory(contractABI, contractBytecode, signer);
            
            // Fazer deploy com gas otimizado para BSC Testnet
            const contract = await contractFactory.deploy(
                tokenData.name,
                tokenData.symbol, 
                totalSupplyWei,
                tokenData.decimals,
                {
                    gasLimit: 800000,
                    gasPrice: ethers.utils.parseUnits('5', 'gwei')
                }
            );

            console.log('Contrato deployado, aguardando confirma√ß√£o...');
            
            // Aguardar confirma√ß√£o
            const deployReceipt = await contract.deployTransaction.wait(1);
            
            console.log('Deploy confirmado:', deployReceipt);
            
            return {
                success: true,
                contractAddress: contract.address,
                transactionHash: deployReceipt.transactionHash,
                network: await provider.getNetwork(),
                gasUsed: deployReceipt.gasUsed.toString(),
                blockNumber: deployReceipt.blockNumber,
                message: `Token "${tokenData.name}" (${tokenData.symbol}) criado com sucesso na blockchain!`
            };

        } catch (error) {
            console.error('Erro detalhado no deploy:', error);
            
            return {
                success: false,
                error: error.reason || error.message || 'Erro desconhecido',
                message: `Erro ao fazer deploy do token "${tokenData.name}":\n\n${error.reason || error.message}\n\nVerifique se voc√™ tem BNB suficiente para pagar o gas e tente novamente.`,
                contractAddress: null,
                transactionHash: null
            };
        }
    }

    handleDeploySuccess(deployResult) {
        this.markSectionComplete('deploy', deployResult);
        
        // Mostrar se√ß√£o de resultado
        this.enableSection('result');
        
        // Preencher detalhes do token
        const tokenDetailsResult = document.getElementById('token-details-result');
        if (tokenDetailsResult && this.sectionData.basicinfo) {
            const { name, symbol, decimals, totalSupply, owner, image } = this.sectionData.basicinfo;
            
            tokenDetailsResult.innerHTML = `
                <div class="mb-3">
                    <i class="bi bi-tag text-success me-2"></i>
                    <strong>Nome:</strong> <span class="text-white">${name}</span>
                </div>
                <div class="mb-3">
                    <i class="bi bi-code-square text-success me-2"></i>
                    <strong>S√≠mbolo:</strong> <span class="text-warning">${symbol}</span>
                </div>
                <div class="mb-3">
                    <i class="bi bi-layers text-success me-2"></i>
                    <strong>Supply Total:</strong> <span class="text-info">${new Intl.NumberFormat('pt-BR').format(totalSupply)}</span>
                </div>
                <div class="mb-3">
                    <i class="bi bi-decimal text-success me-2"></i>
                    <strong>Decimais:</strong> <span class="text-info">${decimals}</span>
                </div>
                <div class="mb-0">
                    <i class="bi bi-person-fill text-success me-2"></i>
                    <strong>Propriet√°rio:</strong><br>
                    <code class="text-warning small">${owner}</code>
                </div>
            `;
        }
        
        // Preencher detalhes da blockchain
        const blockchainDetailsResult = document.getElementById('blockchain-details-result');
        if (blockchainDetailsResult && deployResult) {
            const networkName = deployResult.network?.name || 'Binance Smart Chain Testnet';
            const chainId = deployResult.network?.chainId || '97';
            
            blockchainDetailsResult.innerHTML = `
                <div class="mb-3">
                    <i class="bi bi-globe text-info me-2"></i>
                    <strong>Rede:</strong> <span class="text-white">${networkName}</span>
                </div>
                <div class="mb-3">
                    <i class="bi bi-link-45deg text-info me-2"></i>
                    <strong>Chain ID:</strong> <span class="text-warning">${chainId}</span>
                </div>
                <div class="mb-3">
                    <i class="bi bi-receipt text-info me-2"></i>
                    <strong>TX Hash:</strong><br>
                    <code class="text-warning small">${deployResult.transactionHash}</code>
                </div>
                <div class="mb-0">
                    <i class="bi bi-check-circle text-info me-2"></i>
                    <strong>Status:</strong> <span class="text-success">Confirmado ‚úÖ</span>
                </div>
            `;
        }
        
        // Preencher endere√ßo do contrato
        const contractAddressDisplay = document.getElementById('contract-address-display');
        if (contractAddressDisplay && deployResult) {
            contractAddressDisplay.value = deployResult.contractAddress;
        }
        
        // Configurar bot√£o de c√≥pia
        const copyContractBtn = document.getElementById('copy-contract-btn');
        if (copyContractBtn && deployResult) {
            copyContractBtn.addEventListener('click', () => {
                navigator.clipboard.writeText(deployResult.contractAddress).then(() => {
                    copyContractBtn.innerHTML = '<i class="bi bi-check"></i>';
                    setTimeout(() => {
                        copyContractBtn.innerHTML = '<i class="bi bi-clipboard"></i>';
                    }, 2000);
                });
            });
        }
        
        // Preencher estat√≠sticas
        if (deployResult) {
            const gasUsedDisplay = document.getElementById('gas-used-display');
            if (gasUsedDisplay) {
                gasUsedDisplay.textContent = Number(deployResult.gasUsed).toLocaleString();
            }
            
            const blockNumberDisplay = document.getElementById('block-number-display');
            if (blockNumberDisplay) {
                blockNumberDisplay.textContent = `#${deployResult.blockNumber}`;
            }
        }
        
        // Preencher links do explorer
        const explorerLinks = document.getElementById('explorer-links');
        if (explorerLinks && deployResult) {
            const networkName = deployResult.network?.name || 'BSC Testnet';
            const explorerUrl = this.getExplorerUrl(deployResult.network?.chainId, deployResult.contractAddress);
            const txUrl = this.getExplorerUrl(deployResult.network?.chainId, deployResult.transactionHash, 'tx');
            
            explorerLinks.innerHTML = `
                ${explorerUrl ? `<a href="${explorerUrl}" target="_blank" class="btn btn-outline-warning btn-sm mb-2 d-block">
                    <i class="bi bi-box-arrow-up-right me-1"></i>Ver Contrato
                </a>` : ''}
                ${txUrl ? `<a href="${txUrl}" target="_blank" class="btn btn-outline-info btn-sm d-block">
                    <i class="bi bi-receipt me-1"></i>Ver Transa√ß√£o
                </a>` : ''}
            `;
        }
        
        // Configurar bot√£o adicionar √† carteira
        const addToWalletBtn = document.getElementById('add-to-wallet-btn');
        if (addToWalletBtn && deployResult && this.sectionData.basicinfo) {
            addToWalletBtn.addEventListener('click', () => {
                this.addTokenToWallet(deployResult.contractAddress);
            });
        }
        
        // Configurar bot√£o compartilhar
        const shareTokenBtn = document.getElementById('share-token-btn');
        if (shareTokenBtn && deployResult && this.sectionData.basicinfo) {
            shareTokenBtn.addEventListener('click', () => {
                this.shareToken(deployResult.contractAddress);
            });
        }
        
        // Reabilitar bot√£o de deploy para pr√≥ximos usos
        this.resetDeployButton();
    }

    handleDeployError(error) {
        console.error('Erro no deploy:', error);
        
        // Mostrar se√ß√£o de resultado com erro
        this.enableSection('result');
        
        // Preencher com erro
        const tokenDetailsResult = document.getElementById('token-details-result');
        if (tokenDetailsResult) {
            tokenDetailsResult.innerHTML = `
                <div class="text-center mb-4">
                    <i class="bi bi-exclamation-triangle text-warning" style="font-size: 3rem;"></i>
                    <h4 class="text-warning mt-3">Erro no Deploy</h4>
                </div>
                
                <div class="alert alert-warning">
                    <h5>N√£o foi poss√≠vel criar o token</h5>
                    <p>${error.message || error.error || 'Erro desconhecido durante o deploy.'}</p>
                    <p class="mb-0">Por favor, verifique sua conex√£o e tente novamente.</p>
                </div>
                
                <div class="d-grid">
                    <button class="btn btn-primary" onclick="progressiveFlow.enableSection('deploy')">
                        <i class="bi bi-arrow-repeat me-2"></i>Tentar Novamente
                    </button>
                </div>
            `;
        }
        
        this.resetDeployButton();
    }

    async addTokenToWallet(contractAddress) {
        try {
            if (!window.ethereum) throw new Error('MetaMask n√£o encontrada');
            
            const tokenData = this.sectionData.basicinfo;
            
            await window.ethereum.request({
                method: 'wallet_watchAsset',
                params: {
                    type: 'ERC20',
                    options: {
                        address: contractAddress,
                        symbol: tokenData.symbol,
                        decimals: tokenData.decimals,
                        image: tokenData.image || ''
                    }
                }
            });
            
            // Feedback visual
            const btn = document.getElementById('add-to-wallet-btn');
            if (btn) {
                const originalText = btn.innerHTML;
                btn.innerHTML = '<i class="bi bi-check-circle me-2"></i>Adicionado!';
                btn.classList.add('btn-outline-success');
                setTimeout(() => {
                    btn.innerHTML = originalText;
                    btn.classList.remove('btn-outline-success');
                }, 3000);
            }
            
        } catch (error) {
            console.error('Erro ao adicionar token √† carteira:', error);
            alert('Erro ao adicionar o token √† carteira. Tente manualmente.');
        }
    }

    shareToken(contractAddress) {
        const tokenData = this.sectionData.basicinfo;
        const shareText = `üéâ Acabei de criar meu token "${tokenData.name}" (${tokenData.symbol}) na BSC!\n\nContrato: ${contractAddress}\n\nCriado com XCafe Token Creator! üöÄ`;
        
        if (navigator.share) {
            navigator.share({
                title: `Token ${tokenData.name} (${tokenData.symbol})`,
                text: shareText,
                url: window.location.href
            });
        } else {
            // Fallback para copiar para clipboard
            navigator.clipboard.writeText(shareText).then(() => {
                alert('Informa√ß√µes do token copiadas para a √°rea de transfer√™ncia!');
            });
        }
    }

    resetDeployButton() {
        const deployBtn = document.getElementById('deploy-token-btn');
        
        if (deployBtn) {
            if (this.currentNetwork && this.walletConnected && this.sectionData.basicinfo) {
                deployBtn.disabled = false;
                deployBtn.innerHTML = `<i class="bi bi-rocket-takeoff me-2"></i>CRIAR TOKEN NA ${this.currentNetwork.name.toUpperCase()}`;
            } else {
                deployBtn.disabled = true;
                deployBtn.innerHTML = '<i class="bi bi-rocket-takeoff me-2"></i>CRIAR TOKEN';
            }
        }
    }

    getExplorerUrl(chainId, hash, type = 'address') {
        const explorers = {
            1: 'https://etherscan.io',
            56: 'https://bscscan.com',
            97: 'https://testnet.bscscan.com',
            137: 'https://polygonscan.com',
            80001: 'https://mumbai.polygonscan.com'
        };
        
        const baseUrl = explorers[chainId];
        if (!baseUrl || !hash) return null;
        
        return `${baseUrl}/${type}/${hash}`;
    }

    resetToSection(sectionName) {
        // Limpar se√ß√µes posteriores
        const sections = ['wallet', 'basicinfo', 'deploy', 'result'];
        const targetIndex = sections.indexOf(sectionName);
        
        if (targetIndex !== -1) {
            for (let i = targetIndex; i < sections.length; i++) {
                this.completedSections.delete(sections[i]);
                this.markSectionIncomplete(sections[i]);
            }
        }
        
        this.enableSection(sectionName);
    }

    resetFlow() {
        console.log('üîÑ Resetando fluxo completo...');
        
        // Limpar todos os dados do progressive flow
        this.completedSections.clear();
        this.sectionData = {};
        this.walletConnected = false;
        this.checkingConnection = false; // Reset do flag
        
        // Resetar vari√°veis globais do add-index.js se existirem
        if (typeof window.walletConnected !== 'undefined') {
            window.walletConnected = false;
        }
        if (typeof window.walletAddress !== 'undefined') {
            window.walletAddress = '';
        }
        if (typeof window.currentStep !== 'undefined') {
            window.currentStep = 1;
        }
        if (typeof window.networkData !== 'undefined') {
            window.networkData = {};
        }
        
        // Chamar fun√ß√£o de reset do add-index.js se dispon√≠vel
        if (typeof window.resetAddIndexState === 'function') {
            window.resetAddIndexState();
        }
        
        // Limpar formul√°rios
        const forms = document.querySelectorAll('form');
        forms.forEach(form => form.reset());
        
        // Limpar campos individuais
        const fieldsToReset = [
            'tokenName', 'tokenSymbol', 'totalSupply', 'decimals', 
            'ownerAddress', 'tokenImage', 'wallet-status'
        ];
        
        fieldsToReset.forEach(fieldId => {
            const field = document.getElementById(fieldId);
            if (field) {
                field.value = '';
                if (fieldId === 'wallet-status') {
                    field.placeholder = 'Clique em "Conectar" para iniciar';
                }
            }
        });
        
        // Resetar decimais para valor padr√£o
        const decimalsField = document.getElementById('decimals');
        if (decimalsField) {
            decimalsField.value = '18';
        }
        
        // Ocultar informa√ß√µes da carteira conectada
        const walletConnectionInfo = document.getElementById('wallet-connection-info');
        if (walletConnectionInfo) {
            walletConnectionInfo.style.display = 'none';
        }
        
        const networkInfoSection = document.getElementById('network-info-section');
        if (networkInfoSection) {
            networkInfoSection.style.display = 'none';
        }
        
        // Resetar bot√£o conectar
        const connectBtn = document.getElementById('connect-metamask-btn');
        if (connectBtn) {
            connectBtn.innerHTML = '<i class="bi bi-wallet2 me-2"></i>CONECTAR';
            connectBtn.classList.remove('btn-success');
            connectBtn.classList.add('btn-warning');
            connectBtn.disabled = false;
        }
        
        // Ocultar bot√µes pr√≥ximo
        const nextButtons = ['wallet-next-btn', 'basic-info-next-btn'];
        nextButtons.forEach(btnId => {
            const btn = document.getElementById(btnId);
            if (btn) btn.style.display = 'none';
        });
        
        // Limpar displays de resultado
        const resultDisplays = [
            'token-summary', 'token-details-result', 
            'blockchain-details-result', 'contract-address-display',
            'gas-used-display', 'block-number-display'
        ];
        
        resultDisplays.forEach(displayId => {
            const display = document.getElementById(displayId);
            if (display) {
                display.innerHTML = '';
                if (display.tagName === 'INPUT') {
                    display.value = '';
                }
            }
        });
        
        // Resetar bot√£o de deploy
        this.resetDeployButton();
        
        // Resetar indicadores visuais
        const indicators = document.querySelectorAll('.section-indicator');
        indicators.forEach(indicator => {
            indicator.innerHTML = '<i class="bi bi-circle text-muted"></i>';
        });
        
        // Voltar para primeira se√ß√£o
        this.enableSection('wallet');
        
        console.log('‚úÖ Fluxo resetado com sucesso');
        
        // Mostrar confirma√ß√£o visual
        const clearBtn = document.getElementById('clear-all-btn');
        if (clearBtn) {
            const originalText = clearBtn.innerHTML;
            const originalClasses = clearBtn.className;
            
            clearBtn.innerHTML = '<i class="bi bi-check-circle me-2"></i>Limpo!';
            clearBtn.className = 'btn btn-success';
            
            setTimeout(() => {
                clearBtn.innerHTML = originalText;
                clearBtn.className = originalClasses;
            }, 2000);
        }
    }
}

// Inicializar quando a p√°gina carregar
document.addEventListener('DOMContentLoaded', function() {
    window.progressiveFlow = new ProgressiveFlow();
});
